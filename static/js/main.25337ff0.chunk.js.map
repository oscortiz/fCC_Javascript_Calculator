{"version":3,"sources":["serviceWorker.js","index.js","App.js","componentes/Display.js","componentes/Keyboard.js","componentes/Calculator.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","_this","Object","_mnt_DATOS_CURSOS_PROGRAMACION_2018_freeCodeCamp_GitHub_fCC_Front_End_Libraries_fCC_Javascript_Calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_mnt_DATOS_CURSOS_PROGRAMACION_2018_freeCodeCamp_GitHub_fCC_Front_End_Libraries_fCC_Javascript_Calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_mnt_DATOS_CURSOS_PROGRAMACION_2018_freeCodeCamp_GitHub_fCC_Front_End_Libraries_fCC_Javascript_Calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","handleNumber","e","input","state","target","value","prevVal","length","concat","setState","result","message","messages","multipleZeros","handleDecimal","includes","multipleDecimals","handleOperator","operator","evaluated","handleEvaluate","handleClear","init","handleDelete","slice","expression","Math","round","eval","toString","react__WEBPACK_IMPORTED_MODULE_5___default","className","_componentes_Calculator__WEBPACK_IMPORTED_MODULE_6__","Component","Display","props","id","Keyboard","onClick","Calculator","componentes_Display","componentes_Keyboard"],"mappings":"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","file":"static/js/main.25337ff0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport Calculator from './componentes/Calculator';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {   \n      input: '',\n      prevVal: '',\n      operator: '',\n      result: '0',\n      message: '',\n      evaluated: false\n    }\n\n    this.messages = {\n      init: 'Initial state',\n      multipleZeros: 'ERROR: multiple zeros',\n      multipleDecimals: 'ERROR: multiple decimal points'\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      message: this.messages.init\n    });\n  }\n  \n  /**\n   * As I input numbers, I should be able to see my input in the element with\n   * the id of display.\n   * \n   * When inputting numbers, my calculator should not allow a number to\n   * begin with multiple zeros.\n   */\n  handleNumber = e => {\n    if (this.state.input === '0' && e.target.value === '0') {\n      this.setState({\n        message: this.messages.multipleZeros\n      });\n      return;\n    }\n\n    let input;\n\n    if (this.state.prevVal !== '' && this.state.input.length === 0) {\n      input = e.target.value;\n    } else {\n      input = this.state.input.concat(e.target.value);\n    }\n\n    this.setState({\n      input: input,\n      result: input,\n      message: '.'\n    });\n  }\n\n  /**\n   * When the decimal element is clicked, a .should append to the currently\n   * displayed value; two . in one number should not be accepted.\n   */\n  handleDecimal = e => {\n    if (this.state.input.includes('.')) {\n      this.setState({\n        message: this.messages.multipleDecimals\n      });\n      return;\n    }\n\n    let input = this.state.input.concat(e.target.value);\n    this.setState({\n      input: input,\n      result: input,\n      message: '.'\n    });\n  }\n\n  /**\n   * In any order, I should be able to add, subtract, multiply and divide a chain\n   * of numbers of any length, and when I hit =, the correct result should be shown\n   * in the element with the id of display.\n   * \n   * I should be able to perform any operation (+, -, *, /) on numbers\n   * containing decimal points.\n   * \n   * If 2 or more operators are entered consecutively, the operation\n   * performed should be the last operator entered.\n   * \n   * Pressing an operator immediately following = should start a new\n   * calculation that operates on the result of the previous evaluation.\n   */\n  handleOperator = e => {\n    const operator = e.target.value;\n    if (this.state.input === '' && this.state.operator !== '') {\n      this.setState({\n        operator: operator\n      });\n      return;      \n    }\n\n    if (this.state.evaluated) {\n      this.setState({\n        operator: operator,\n        message: '.',\n        evaluated: false\n      });\n    } else if (this.state.prevVal !== '') {     \n      this.handleEvaluate(null); \n      this.setState({\n        operator: operator,\n        message: '.'\n      });            \n    } else {\n      this.setState({\n        input: '',\n        prevVal: this.state.input, \n        operator: operator,\n        message: '.'\n      });\n    }\n  }\n\n  /**\n   * At any time, pressing the clear button clears the input and output values,\n   * and returns the calculator to its initialized state; 0 should be shown in \n   * the element with the id of display.\n   */\n  handleClear = e => {\n    this.setState({   \n      input: '',\n      prevVal: '',\n      operator: '',\n      result: '0',\n      message: this.messages.init,\n      evaluated: false\n    });\n  }\n\n  handleDelete = e => {\n    if (this.state.input.length > 1) {\n      const input = this.state.input.slice(0, -1);\n      this.setState({   \n        input: input,\n        result: input,\n        message: '.'\n      });\n    } else if (this.state.input.length === 1) {\n      this.setState({   \n        input: '',\n        result: '0',\n        message: '.'\n      });\n    }\n  }\n\n  /**\n   * When I hit =, the correct result should be shown\n   * in the element with the id of display.\n   */\n  handleEvaluate = e => {\n    let evaluated = e === null ? false : true;\n    let expression = this.state.prevVal.concat(this.state.operator).concat(this.state.input);\n    const result = Math.round(1000000000 * eval(expression)) / 1000000000;\n    this.setState({\n      input: '',\n      result: result.toString(),\n      prevVal: result.toString(),\n      operator: '',\n      message: '.',\n      evaluated: evaluated\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Calculator \n          result={this.state.result}\n          message={this.state.message}\n          handleNumber={this.handleNumber}\n          handleDecimal={this.handleDecimal}\n          handleOperator={this.handleOperator}\n          handleClear={this.handleClear}\n          handleDelete={this.handleDelete}\n          handleEvaluate={this.handleEvaluate}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Display = props => {\n    return (\n        <div className=\"row mb-3\" id=\"screen\">\n            <div className=\"col-12 p-3 shadow\">\n                <p className=\"text-right font-weight-bolder mb-n1 result\" id=\"display\">{props.result}</p>\n                <hr />\n                <p className=\"text-right font-weight-bolder my-n2 message\">{props.message}</p>\n            </div>\n        </div> \n    );\n}\n\nDisplay.propTypes = {\n    result: PropTypes.string.isRequired,\n    message: PropTypes.string.isRequired\n}\n\nexport default Display;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Keyboard = props => {\n\n    return (            \n        <div className=\"p-2\" id=\"keyboard\">\n            <div className=\"row mb-2\">\n                <button className=\"col-6 key action\" id=\"clear\" value=\"AC\" onClick={props.handleClear}>AC</button>\n                <button className=\"col-3 key action\" id=\"del\" value=\"DEL\" onClick={props.handleDelete}>&larr;</button>\n                <button className=\"col-3 key operator\" id=\"divide\" value=\"/\" onClick={props.handleOperator}>/</button>\n            </div>\n            <div className=\"row mb-2\">\n                <button className=\"col-3 key number\" id=\"seven\" value=\"7\" onClick={props.handleNumber}>7</button>\n                <button className=\"col-3 key number\" id=\"eight\" value=\"8\" onClick={props.handleNumber}>8</button>\n                <button className=\"col-3 key number\" id=\"nine\" value=\"9\" onClick={props.handleNumber}>9</button>                \n                <button className=\"col-3 key operator\" id=\"multiply\" value=\"*\" onClick={props.handleOperator}>x</button>\n            </div>\n            <div className=\"row mb-2\">\n                <button className=\"col-3 key number\" id=\"four\" value=\"4\" onClick={props.handleNumber}>4</button>\n                <button className=\"col-3 key number\" id=\"five\" value=\"5\" onClick={props.handleNumber}>5</button>\n                <button className=\"col-3 key number\" id=\"six\" value=\"6\" onClick={props.handleNumber}>6</button>                \n                <button className=\"col-3 key operator\" id=\"add\" value=\"+\" onClick={props.handleOperator}>+</button>                \n            </div>\n            <div className=\"row mb-2\">\n                <button className=\"col-3 key number\" id=\"one\" value=\"1\" onClick={props.handleNumber}>1</button>\n                <button className=\"col-3 key number\" id=\"two\" value=\"2\" onClick={props.handleNumber}>2</button>\n                <button className=\"col-3 key number\" id=\"three\" value=\"3\" onClick={props.handleNumber}>3</button>                \n                <button className=\"col-3 key operator\" id=\"subtract\" value=\"-\" onClick={props.handleOperator}>-</button>                \n            </div>\n            <div className=\"row mb-2\">\n                <button className=\"col-3 key number\" id=\"zero\" value=\"0\" onClick={props.handleNumber}>0</button>\n                <button className=\"col-3 key number\" id=\"decimal\" value=\".\" onClick={props.handleDecimal}>.</button>\n                <button className=\"col-6 key\" id=\"equals\" value=\"=\" onClick={props.handleEvaluate}>=</button>                \n            </div>                      \n        </div>    \n    );\n}\n\nKeyboard.propTypes = {\n    handleNumber: PropTypes.func.isRequired,\n    handleDecimal: PropTypes.func.isRequired,\n    handleOperator: PropTypes.func.isRequired,\n    handleClear: PropTypes.func.isRequired,\n    handleDelete: PropTypes.func.isRequired,\n    handleEvaluate: PropTypes.func.isRequired\n}\n \nexport default Keyboard;","import React from 'react';\nimport Display from './Display';\nimport Keyboard from './Keyboard';\nimport PropTypes from 'prop-types';\n\nconst Calculator = props => {\n    return (\n        <div className=\"row justify-content-center align-items-center\" id=\"wrapper\">\n            <div className=\"col-11 col-sm-8 col-md-4\" id=\"calculator\">\n                <div className=\"row text-center p-2\">\n                    <span className=\"col-12 text-uppercase font-weight-bolder mt-1\" id=\"title\">Calculator</span>\n                </div> \n                <Display \n                    result={props.result}\n                    message={props.message}\n                />                \n                <Keyboard \n                    handleNumber={props.handleNumber}\n                    handleDecimal={props.handleDecimal}\n                    handleOperator={props.handleOperator}\n                    handleClear={props.handleClear}\n                    handleDelete={props.handleDelete}\n                    handleEvaluate={props.handleEvaluate}\n                /> \n                <div className=\"row text-center p-2\">\n                    <span className=\"col-12 font-weight-bolder\" id=\"subtitle\">Immediate Execution Logic</span>\n                </div>              \n            </div>           \n        </div>\n    );\n}\n\nCalculator.propTypes = {\n    result: PropTypes.string.isRequired,\n    message: PropTypes.string.isRequired,\n    handleNumber: PropTypes.func.isRequired,\n    handleDecimal: PropTypes.func.isRequired,\n    handleOperator: PropTypes.func.isRequired,\n    handleClear: PropTypes.func.isRequired,\n    handleDelete: PropTypes.func.isRequired,\n    handleEvaluate: PropTypes.func.isRequired\n}\n \nexport default Calculator;"],"sourceRoot":""}